[33m17333f1[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmain[m[33m, [m[1;31morigin/main[m[33m)[m HEAD@{0}: commit: ready to deploy the app
[33mb822595[m HEAD@{1}: commit: Exploring actuator data using spring boot admin
[33m7b0d83c[m HEAD@{2}: commit: Configure the spring boot admin server for the eazyschool application
[33m6ae0c5d[m HEAD@{3}: commit: changing the /eazyschool/actuator/info endpoint response
[33m9b2dce0[m HEAD@{4}: commit: exposing all the endpoints of spring actuators
[33m6b31820[m HEAD@{5}: commit: exposing the endpoints of actuators
[33mf2c57d3[m HEAD@{6}: commit: Creating beans conditionally based on active profile
[33m7d78985[m HEAD@{7}: commit: Packaging the complete project in jar file for the purpose of deployment
[33m6aabbec[m HEAD@{8}: commit: Implementation & Demo of profiles
[33me2ddd66[m HEAD@{9}: commit: Reading properties using @ConfigurationProperties
[33ma9af853[m HEAD@{10}: commit: Reading properties using Environment Interface
[33m70a9588[m HEAD@{11}: commit: Reading properties using @Value annotation
[33mb12f21e[m HEAD@{12}: commit: Storing the console log statements to a file
[33m5554430[m HEAD@{13}: commit: changing the color of logging statements in IDE console
[33m34a296c[m HEAD@{14}: commit: Demo of Types of logging
[33mbd05dd4[m HEAD@{15}: commit: logging configuration inside spring boot
[33mc2b97df[m HEAD@{16}: commit: securing the spring data rest apis path and HAL explorer path & Disabling the csrf protection for spring data rest apis path
[33maf8504d[m HEAD@{17}: commit: Demo of HAL Explorer & setting up the data-api path to reload the hal explorer in our web browser window
[33mf73122f[m HEAD@{18}: commit: Embedded links in rest apis response
[33m8212b75[m HEAD@{19}: commit: exposing the profile path & Â–exposes Spring Data repositories as RESTful endpointsby using spring data rest project
[33m0f4481e[m HEAD@{20}: commit: setting up project to understand spring data rest and hal explorer
[33mb6e7c7c[m HEAD@{21}: commit: consuming rest services using OpenFeign
[33m8751650[m HEAD@{22}: commit: Demo of content filter in rest services using @JsonIgnore annotation of jackson library
[33mdbc4995[m HEAD@{23}: commit: Sending response in XML format in rest services
[33mf063c91[m HEAD@{24}: commit: Cross Origin enabled for all domains
[33m5519852[m HEAD@{25}: commit: Implement global Exception handler for rest services using @RestControllerAdvice annotation
[33m99a325e[m HEAD@{26}: commit: demo of update operation using rest services
[33m585a47c[m HEAD@{27}: commit: Demo of delete operation using rest service and RequestEntity
[33ma4236c2[m HEAD@{28}: commit: Demo of save operation using Rest service and ResponseEntiry
[33m6225988[m HEAD@{29}: commit: Understanding the another approach to create the rest apis using@RestController
[33m35ea123[m HEAD@{30}: commit: another rest api created to fetch all the messages
[33m61435ca[m HEAD@{31}: commit: implementing rest api for fetching message status & Disable the csrf protection for route '/api/**'
[33mc0e8906[m HEAD@{32}: commit: Concept of @Query ,JPQL and NativeQuery
[33mec2c9e9[m HEAD@{33}: commit: sorting and pagination inside spring data jpa
[33me6b6271[m HEAD@{34}: commit: dynamic sorting inside spring data Jpa
[33md2337bd[m HEAD@{35}: commit: admin can delete students from courses section of admin dashboard
[33m11d1f09[m HEAD@{36}: commit: display and add courses inside admin course section
[33mdf8f7d4[m HEAD@{37}: commit: admin can create classes, add students to a particular class
[33m8b15f92[m HEAD@{38}: commit: Now admin can add a new class
[33m457cc85[m HEAD@{39}: commit: design classes webpage in dashboard section
[33m98fc3d0[m HEAD@{40}: commit: add some buttons to admin dashboard
[33mb84bfab[m HEAD@{41}: commit: fetch data from DB and update the data ,saving that data to the database,Now user can update the profile data
[33m32e9f1a[m HEAD@{42}: commit: displaying profile page successfully
[33mbaaceca[m HEAD@{43}: commit: displaying profile link in dashboard section
[33me7d04f3[m HEAD@{44}: commit: disable the javax validations in spring data Jpa
[33m0931f38[m HEAD@{45}: commit: securing my admin password by storing the hash value only to the database
[33m532d9f5[m HEAD@{46}: commit: Implementing password Hashing with BCryptPasswordEncoder
[33m31a412e[m HEAD@{47}: commit: login by custom email and password
[33m99bd416[m HEAD@{48}: commit: implementing spring security changes for custom authentication
[33mfc15f18[m HEAD@{49}: commit: Making one to one relationship configurations inside entities
[33m920d065[m HEAD@{50}: commit: setup of mySql local database connection
[33m8b5f971[m HEAD@{51}: commit: creating new tables required for new user registration
[33mdcc84f5[m HEAD@{52}: commit: Implementing custom validations for the register purpose of a person
[33m82dd198[m HEAD@{53}: commit: implementing automatic auditing in my application
[33m87d6967[m HEAD@{54}: commit: migrating from spring jdbc to spring data jpa successfully
[33m83af05c[m HEAD@{55}: commit: migrating to spring data jpa
[33m727a4cf[m HEAD@{56}: commit: Migrating from spring jdbc to spring data jpa
[33ma9708b4[m HEAD@{57}: commit: build relationship between model pojo classes and the database tables and columns
[33m99618c8[m HEAD@{58}: commit: Demo of mySQL database changes inside my application
[33m2d49ce8[m HEAD@{59}: commit: saving holidays to h2 database and displaying holidays from h2 database
[33ma265d93[m HEAD@{60}: commit: implementing AOP inside my application
[33m14baf58[m HEAD@{61}: commit: Update contact message status using jdbcTemplate update operation
[33meadf321[m HEAD@{62}: commit: Display contact messages from DB using jdbcTemplate
[33m492a5d5[m HEAD@{63}: commit: adding design to admin dashboard
[33m3c9a66c[m HEAD@{64}: commit: saving contact message details into Db using JdbcTemplate insert operation
[33m5ae03c8[m HEAD@{65}: commit: Setup of H2 database
[33mef6b00d[m HEAD@{66}: commit: setting up and intreacting with in memory H2 database
[33m10e7511[m HEAD@{67}: commit: Solution of CSRF
[33mb107129[m HEAD@{68}: commit: Creating global error page by taking help of @ExceptionHandler and @ControllerAdvice annotations
[33mc32e6fd[m HEAD@{69}: commit: Show dashboard and logout buttons only when user logged in
[33m502044a[m HEAD@{70}: commit: implementing the login and logout page
[33m4c13913[m HEAD@{71}: commit: Configuring multiple users using in-memory authentication
[33m6028aa2[m HEAD@{72}: commit: Disabling the CSRF protection
[33m4367aee[m HEAD@{73}: commit: sending the post request from contact.html without using thymeleaf
[33md2e570f[m HEAD@{74}: commit: Configure custom security configurations using spring security
[33m2a0b06d[m HEAD@{75}: commit: configure denyAll requests to access the web application
[33m570aa26[m HEAD@{76}: commit: permit all requests without any by default authentication
[33mf727b2e[m HEAD@{77}: commit: Demo of Spring Security inside the web application
[33ma8bc22c[m HEAD@{78}: commit: Demo of @ApplicationScope in Spring web Scopes
[33ma76f70f[m HEAD@{79}: commit: Demo of @SessionScope in Spring MVC
[33maa502ea[m HEAD@{80}: commit: Demo of @RequestScope web scope in Spring MVC
[33mb18ecf8[m HEAD@{81}: commit: adding validation related code changes
[33m1e642b1[m HEAD@{82}: commit: adding dependency of Bean validation and apply validations on contact model
[33m187b6f8[m HEAD@{83}: commit: Accepting path params using @PathVariable annotation
[33m2934208[m HEAD@{84}: commit: Accepting query params using @RequestParam annotation
[33m8b83da2[m HEAD@{85}: commit: Demo of @Slf4j annotation from Lombok Library
[33mbb03293[m HEAD@{86}: commit: make code short and clean by using Lombok Library
[33m01c5e78[m HEAD@{87}: commit: building holiday page of school app and sending data from backend to frontend
[33mb814520[m HEAD@{88}: commit: Define the actions for all buttons & links
[33md55b801[m HEAD@{89}: commit: Submit information from Contact page using POJO obje